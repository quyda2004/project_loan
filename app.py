import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
import numpy as np
import os
import joblib
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler, OrdinalEncoder
import joblib
# üé® C·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="Superstore Analysis & Prediction", page_icon="üìä", layout="wide")

# üõ† Load d·ªØ li·ªáu c√≥ cache
@st.cache_data
def load_data():
    return pd.read_csv("saukhichinhsua.csv", encoding="ISO-8859-1")

try:
    df = load_data()
except Exception as e:
    st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
    st.stop()


# üîÑ Kh·ªüi t·∫°o session ID ƒë·ªÉ tr√°nh tr√πng l·∫∑p ID c·ªßa Streamlit
if "run_id" not in st.session_state:
    st.session_state.run_id = 0

# ========================== H√ÄM V·∫º BI·ªÇU ƒê·ªí ==========================

# üîπ Histogram
def plot_univariate(col):
    fig = px.histogram(df, x=col, nbins=20, title=f"üìä Ph√¢n b·ªë c·ªßa {col}",
                       opacity=0.8, text_auto=True, template="plotly_dark",
                       color_discrete_sequence=["#FF4C4C"])
    st.plotly_chart(fig, use_container_width=True, key=f"hist_{col}_{st.session_state.run_id}")

# üîπ Boxplot
def plot_boxplot(col):
    fig, ax = plt.subplots(figsize=(10, 5))
    with plt.style.context("ggplot"):
        sns.boxplot(x=df[col], ax=ax, color="royalblue")
        ax.set_title(f"üì¶ Boxplot c·ªßa {col}", fontsize=14)
    st.pyplot(fig)

# üîπ Histogram + KDE
def plot_histogram_kde(col):
    fig = px.histogram(df, x=col, nbins=30, histnorm="probability density",
                       title=f"üìà Ph√¢n b·ªë v√† m·∫≠t ƒë·ªô KDE c·ªßa {col}",
                       opacity=0.6, template="plotly_dark", color_discrete_sequence=["blue"],
                       marginal="violin")
    st.plotly_chart(fig, use_container_width=True, key=f"kde_{col}_{st.session_state.run_id}")

# üîπ Ph√¢n t√≠ch 2 bi·∫øn
def plot_two_variables(df, col1, col2_value, plot_type="bar"):
    """V·∫Ω bi·ªÉu ƒë·ªì gi·ªØa m·ªôt bi·∫øn b·∫•t k·ª≥ v√† tr·∫°ng th√°i c·ª• th·ªÉ c·ªßa loan_status."""
    st.subheader(f"üìä {col1} theo '{col2_value}' trong Loan Status")

    if col1 not in df.columns:
        st.error(f"‚ö†Ô∏è C·ªôt `{col1}` kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
        return

    if "loan_status" not in df.columns:
        st.error(f"‚ö†Ô∏è C·ªôt `loan_status` kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
        return

    filtered_df = df[df["loan_status"] == col2_value]
    if filtered_df.empty:
        st.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o v·ªõi tr·∫°ng th√°i '{col2_value}'!")
        return

    key_id = f"{col1}_{col2_value}_{plot_type}_{st.session_state.run_id}"

    if plot_type == "bar":
        count_data = filtered_df[col1].value_counts(normalize=True) * 100
        fig = px.bar(x=count_data.index, y=count_data.values,
                     labels={'x': col1, 'y': 'T·ª∑ l·ªá (%)'},
                     title=f"T·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa {col1} theo '{col2_value}'",
                     color_discrete_sequence=["#636EFA"])
        fig.update_layout(xaxis_tickangle=-45)
    elif plot_type == "box":
        if pd.api.types.is_numeric_dtype(df[col1]):
            fig = px.box(filtered_df, x="loan_status", y=col1,
                         title=f"Boxplot c·ªßa {col1} theo '{col2_value}'",
                         color="loan_status",
                         color_discrete_sequence=["#EF553B"])
        else:
            st.error("‚ö†Ô∏è Boxplot ch·ªâ √°p d·ª•ng cho bi·∫øn s·ªë!")
            return
    else:
        st.error("‚ö†Ô∏è Ki·ªÉu bi·ªÉu ƒë·ªì kh√¥ng h·ª£p l·ªá!")
        return

    st.plotly_chart(fig, key=key_id)

# ========================== GIAO DI·ªÜN STREAMLIT ==========================

# üéØ T·∫°o Tabs
tab1, tab2, tab3 = st.tabs(["üìä Ph√¢n t√≠ch d·ªØ li·ªáu","üìäPh√¢n t√≠ch 2 bi·∫øn" ,"üî¢ D·ª± ƒëo√°n s·ªë l∆∞·ª£ng b√°n"])

# ===================== Tab 1: Ph√¢n T√≠ch D·ªØ Li·ªáu =====================
with tab1:
    st.title("üìä Ph√¢n T√≠ch D·ªØ Li·ªáu")
    st.markdown("### üîç Ch·ªçn m·ªôt c·ªôt ƒë·ªÉ ph√¢n t√≠ch:")

    # Ch·ªçn c·ªôt d·ªØ li·ªáu
    column_selected = st.selectbox("üìù Ch·ªçn c·ªôt:", df.columns)

    # Hi·ªÉn th·ªã th√¥ng tin c·ªôt
    st.markdown(f"## üìå Th√¥ng tin v·ªÅ `{column_selected}`")
    if df[column_selected].dtype in ['int64', 'float64']:
        st.write(df[column_selected].describe())
    else:
        st.write("üîπ Gi√° tr·ªã duy nh·∫•t:", df[column_selected].unique())
        st.write("üîπ S·ªë l∆∞·ª£ng m·ªói gi√° tr·ªã:", df[column_selected].value_counts())

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìä Histogram")
        plot_univariate(column_selected)

    with col2:
        st.markdown("### üì¶ Boxplot")
        plot_boxplot(column_selected)

    st.markdown("### üìà KDE Density Plot")
    plot_histogram_kde(column_selected)

# ===================== Tab 2: Ph√¢n T√≠ch Hai Bi·∫øn =====================
with tab2:
    st.title("üî¢ Ph√¢n T√≠ch Hai Bi·∫øn (V·ªõi Loan Status)")

    # Ch·ªçn bi·∫øn ƒë·∫ßu ti√™n
    col1_name = st.selectbox("üìå Ch·ªçn c·ªôt 1:", df.columns, key="col1")

    # Ch·ªçn bi·∫øn th·ª© hai trong 'loan_status'
    if "loan_status" in df.columns:
        loan_status_values = df["loan_status"].unique()
        col2_name = st.selectbox("üìå Ch·ªçn Loan Status:", loan_status_values, key="col2")
    else:
        st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt `loan_status`!")
        st.stop()

    # Hi·ªÉn th·ªã th·ªëng k√™
    col1, col2 = st.columns(2)

    with col1:
        st.write(f"### üìå Th·ªëng k√™ `{col1_name}`")
        if df[col1_name].dtype in ["int64", "float64"]:
            st.write(df[col1_name].describe())
        else:
            st.write("üîπ Gi√° tr·ªã duy nh·∫•t:", df[col1_name].unique())
            st.write("üîπ S·ªë l∆∞·ª£ng m·ªói gi√° tr·ªã:", df[col1_name].value_counts())

    with col2:
        st.write(f"### üìå Th·ªëng k√™ `{col2_name}` trong Loan Status")
        subset_df = df[df["loan_status"] == col2_name]
        st.write(subset_df.describe())

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.markdown("### üìä Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch Hai Bi·∫øn")
    plot_two_variables(df, col1_name, col2_name, plot_type="bar")
# C·∫•u h√¨nh c√°ch t·∫£i m√¥ h√¨nh ƒë√∫ng
@st.cache_resource  # L∆∞u m√¥ h√¨nh trong cache
def load_model(model_path="XG_Boost.pkl"):
    try:
        # ƒê·∫£m b·∫£o m·ªü file m·ªôt c√°ch ch√≠nh x√°c
        model = joblib.load(model_path)
        st.success("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng!")
        return model
    except FileNotFoundError:
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh t·∫°i ƒë∆∞·ªùng d·∫´n: {model_path}")
        st.info("üìÅ Vui l√≤ng ƒë·∫£m b·∫£o file m√¥ h√¨nh 'random_forest.pkl' ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th∆∞ m·ª•c hi·ªán t·∫°i.")
        return None
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
        st.info("‚ö†Ô∏è ƒê√¢y c√≥ th·ªÉ do phi√™n b·∫£n pickle ho·∫∑c sklearn kh√¥ng t∆∞∆°ng th√≠ch.")
        return None

# T·∫£i m√¥ h√¨nh
model = load_model()

# Debug m√¥ h√¨nh
if 'model' in locals():
    st.sidebar.write(f"Model type: {type(model)}")
else:
    st.sidebar.error("Model kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a")

# X√°c ƒë·ªãnh c√°c c·ªôt s·ªë v√† c·ªôt ph√¢n lo·∫°i (c·∫ßn gi·ªëng nh∆∞ l√∫c train)
numeric_cols = [
    'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate',
    'annual_inc',  'dti', 'delinq_2yrs', 'inq_last_6mths',
    'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc',
    'collections_12_mths_ex_med'
]
categorical_cols = [
    'grade', 'sub_grade', 'home_ownership', 'verification_status',
    'issue_d', 'purpose',  'addr_state', 'earliest_cr_line'
]

# H√†m x·ª≠ l√Ω c·ªôt earliest_cr_line
def extract_year(value):
    try:
        return datetime.now().year - int(value[-2:])  # L·∫•y 2 s·ªë cu·ªëi (v√≠ d·ª•: '99' -> 1999)
    except:
        return None  # G√°n None n·∫øu l·ªói

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o gi·ªëng nh∆∞ khi hu·∫•n luy·ªán
def preprocess_input(df):
    # T·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu g·ªëc
    df_processed = df.copy()

    # X·ª≠ l√Ω tr∆∞·ªùng earliest_cr_line
    df_processed["earliest_cr_line"] = df_processed["earliest_cr_line"].apply(extract_year)

    # Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë
    scaler = MinMaxScaler()
    df_processed[numeric_cols] = scaler.fit_transform(df_processed[numeric_cols])

    # M√£ h√≥a d·ªØ li·ªáu danh m·ª•c
    encoder = OrdinalEncoder()
    df_processed[categorical_cols] = encoder.fit_transform(df_processed[categorical_cols])

    # B·ªï sung c·ªôt thi·∫øu (n·∫øu c·∫ßn) - d·ª±a v√†o X_train_final.shape[1] = 23
    # Th√™m c·ªôt gi·∫£ n·∫øu thi·∫øu
    expected_cols = 23
    current_cols = len(df_processed.columns)

    if current_cols < expected_cols:
        missing_cols = expected_cols - current_cols
        for i in range(missing_cols):
            col_name = f"feature_{current_cols + i}"
            df_processed[col_name] = 0  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

    # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt ƒë√∫ng
    # L∆∞u √Ω: B·∫°n n√™n thay th·∫ø d√≤ng d∆∞·ªõi ƒë√¢y v·ªõi th·ª© t·ª± ch√≠nh x√°c c·ªßa c√°c c·ªôt trong t·∫≠p hu·∫•n luy·ªán n·∫øu bi·∫øt
    # df_processed = df_processed[feature_names]  # feature_names l√† danh s√°ch th·ª© t·ª± c·ªôt ch√≠nh x√°c

    return df_processed

with tab3:
    st.header("üîÆ D·ª± ƒëo√°n Kho·∫£n Vay")

    # Hi·ªÉn th·ªã debug info v·ªÅ model
    if model is not None:
        st.sidebar.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i")
        if hasattr(model, 'feature_names_in_'):
            st.sidebar.info(f"S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng m√¥ h√¨nh: {len(model.feature_names_in_)}")
            st.sidebar.info(f"T√™n c√°c ƒë·∫∑c tr∆∞ng: {', '.join(model.feature_names_in_)}")

    # Nh·∫≠p d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng
    st.write("üîπ **Nh·∫≠p th√¥ng tin ƒë·ªÉ d·ª± ƒëo√°n**")
    user_input = {
        # C√°c c·ªôt s·ªë
        "loan_amnt": st.number_input("S·ªë ti·ªÅn vay", min_value=500, max_value=50000, value=10000),
        "funded_amnt": st.number_input("S·ªë ti·ªÅn ƒë∆∞·ª£c c·∫•p v·ªën", min_value=500, max_value=50000, value=10000),
        "funded_amnt_inv": st.number_input("S·ªë ti·ªÅn nh√† ƒë·∫ßu t∆∞ c·∫•p v·ªën", min_value=500, max_value=50000, value=10000),
        "term": st.number_input("Th·ªùi h·∫°n kho·∫£n vay (th√°ng)", min_value=12, max_value=60, value=36),
        "int_rate": st.slider("L√£i su·∫•t (%)", 5.0, 30.0, 12.5),
        "annual_inc": st.number_input("Thu nh·∫≠p h√†ng nƒÉm ($)", value=50000),
        "dti": st.number_input("T·ª∑ l·ªá n·ª£ tr√™n thu nh·∫≠p (%)", value=20.0),
        "delinq_2yrs": st.number_input("S·ªë l·∫ßn tr·ªÖ h·∫°n trong 2 nƒÉm", min_value=0, max_value=10, value=0),
        "inq_last_6mths": st.number_input("S·ªë l·∫ßn truy v·∫•n t√≠n d·ª•ng trong 6 th√°ng", min_value=0, max_value=10, value=1),
        "open_acc": st.number_input("S·ªë t√†i kho·∫£n ƒëang m·ªü", min_value=0, max_value=50, value=10),
        "pub_rec": st.number_input("S·ªë l·∫ßn b·ªã b√°o c√°o c√¥ng khai", min_value=0, max_value=10, value=0),
        "revol_bal": st.number_input("S·ªë d∆∞ quay v√≤ng", value=10000),
        "revol_util": st.slider("S·ª≠ d·ª•ng t√≠n d·ª•ng (%)", 0.0, 100.0, 50.0),
        "total_acc": st.number_input("T·ªïng s·ªë t√†i kho·∫£n t√≠n d·ª•ng", value=15),
        "collections_12_mths_ex_med": st.number_input("S·ªë l·∫ßn thu h·ªìi n·ª£ trong 12 th√°ng qua", min_value=0, max_value=10, value=0),

        # C√°c c·ªôt ph√¢n lo·∫°i (ch·ªçn t·ª´ gi√° tr·ªã unique trong dataset)
        "grade": st.selectbox("X·∫øp h·∫°ng t√≠n d·ª•ng", df["grade"].unique()),
        "sub_grade": st.selectbox("X·∫øp h·∫°ng ph·ª•", df["sub_grade"].unique()),
        "home_ownership": st.selectbox("Quy·ªÅn s·ªü h·ªØu nh√†", df["home_ownership"].unique()),
        "verification_status": st.selectbox("Tr·∫°ng th√°i x√°c minh", df["verification_status"].unique()),
        "issue_d": st.selectbox("Ng√†y c·∫•p kho·∫£n vay", df["issue_d"].unique()),
        "purpose": st.selectbox("M·ª•c ƒë√≠ch vay", df["purpose"].unique()),
        "addr_state": st.selectbox("Bang c∆∞ tr√∫", df["addr_state"].unique()),
        "earliest_cr_line": st.text_input("NƒÉm m·ªü t√†i kho·∫£n t√≠n d·ª•ng (MM-YY)", "Jan-99"),
    }


    # N√∫t d·ª± ƒëo√°n v·ªõi x·ª≠ l√Ω l·ªói
    if st.button("üîÆ D·ª± ƒëo√°n"):
        if model is not None:
            try:
                # Hi·ªÉn th·ªã tr·∫°ng th√°i x·ª≠ l√Ω
                with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                    # Chuy·ªÉn dict th√†nh DataFrame
                    user_df = pd.DataFrame([user_input])

                    # Debug d·ªØ li·ªáu ƒë·∫ßu v√†o
                    st.write("S·ªë l∆∞·ª£ng c·ªôt ƒë·∫ßu v√†o:", len(user_df.columns))

                    # Chu·∫©n h√≥a d·ªØ li·ªáu tr∆∞·ªõc khi d·ª± ƒëo√°n
                    processed_input = preprocess_input(user_df)

                    # Debug d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
                    st.write("S·ªë l∆∞·ª£ng c·ªôt sau x·ª≠ l√Ω:", len(processed_input.columns))

                    # D·ª± ƒëo√°n
                    prediction = model.predict(processed_input)

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success(f"### üéØ **K·∫øt qu·∫£ d·ª± ƒëo√°n:** {prediction[0]}")

                    # Hi·ªÉn th·ªã x√°c su·∫•t n·∫øu m√¥ h√¨nh h·ªó tr·ª£
                    if hasattr(model, 'predict_proba'):
                        proba = model.predict_proba(processed_input)
                        st.write("### üìä **X√°c su·∫•t d·ª± ƒëo√°n:**")
                        for i, prob in enumerate(proba[0]):
                            st.write(f"L·ªõp {model.classes_[i]}: {prob*100:.2f}%")
            except Exception as e:
                st.error(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {str(e)}")
                st.info("üõ†Ô∏è Chi ti·∫øt debug:")
                st.exception(e)
                st.info("üí° G·ª£i √Ω: ƒê·∫£m b·∫£o c·∫•u tr√∫c d·ªØ li·ªáu ƒë·∫ßu v√†o kh·ªõp v·ªõi d·ªØ li·ªáu hu·∫•n luy·ªán")
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ d·ª± ƒëo√°n v√¨ m√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i.")
            st.info("üìÅ Vui l√≤ng ki·ªÉm tra file m√¥ h√¨nh 'XG_Boost.pkl'.")